<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///시스템 초기화
//z = 0;
global.debug_mode = true;

// 이 변수가 캐릭터의 방향을 처리하게 됩니다.
cDir = RIGHT; 

//피격시 쉐이킹.
isShake = false;

//몬스터가 맞았는지 확인 하기 위한 전역변수.
isMonsterHit = false;

//몬스터가 잡혔는지 확인 하기 위한 전역변수.
isMonsterGrab = false;

//몬스터가 잡히고, 몇 대 맞았는지 카운터.
// # 해당 카운트는 일단 피격당한 몬스터가 카운트 시키는게 로직상 맞는 이야기지만,
// # 테스트를 위해 선비측에서 먼저 Counting 하여 테스트를 진행한다. 2016-03-13.
monsterGrabHitCnt = 0;

//지금 대쉬 정지 중 인지 아닌지.
//isRunningStop = false;

//STATE 초기화
STATE = IDLE;       

//대쉬에 사용하는 더블탭 타이머.
double_tap_timer = 0;

// 공격중인지 아닌지를 알수 있게 해주는 전역변수.
//isNowAttack = false; 

//오리지널 속도 == 기본 속도.
moveSpeed = 8;
orgnSpeed = 8;              

//대쉬 속도
//runSpeed = 30;
runSpeed = 16;

//이동시 기본 add 하는 속도.
acc = 2;                                

//수평속도
hspd = 0;
//수직속도
vspd = 0;

//캐릭터 기본 대기 스프라이트.
sprite_index = spr_sunbee_n_idle;
//이미지 재생 기본 속도.
image_speed = .25;
original_image_speed = .25;

//Z-축 이동을 위한 변수선언.
/***************************************************
  Add the third coordinate, in this case I call it z
  coordinate, it will works alongside the x and y
  coordinate, and z will be the height measure.
 ***************************************************/
z           =0;  //current height
zbottom     =0;  //the lowest position/ground area in current x and y position
zheight     =24; //the height of this object
zspeed      =0;  //set the vertical speed
zgravity    =1;  //gravity, the direction is always facing down


// Hit Area 생성.
objHitBox = Hit_area_create(x, y-90, z, 10, 10, 10, room_speed * 0.25, id, id);
// Grab Area 생성.
objGrabBox = Grab_area_create(x, y-90, z, 30, 30, 10, room_speed * 0.25, id, id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 점프 : zspeed =- 14;
zspeed =- 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///타격 이펙트 OBJ 생성
/*
if(isMonsterHit == true)
{
    var _effect_x = 104;
    var _effect_y = 127; //1,2타 이펙트 노출위치.
    
    if(sprite_index == spr_sunbee_n_atck_1 
        || sprite_index == spr_sunbee_n_atck_2 )
    {
        _effect_x = 104;
        _effect_y = 127; //1,2타 이펙트 노출위치.
    }
    else if(sprite_index == spr_sunbee_n_atck_3)
    {
        _effect_x = 90;
        _effect_y = 145; //3타 이펙트 노출 위치.
    }
    else if(sprite_index == spr_sunbee_n_atck_4)
    {
        _effect_x = 112;
        _effect_y = 151; //4타 이펙트 노출 위치.
    }
    
    // 왼쪽으로 위치 하고 있을 때에는 x 값을 캐릭터 width 만큼 적당히 왼쪽으로 옮긴다. 
    if(cDir == LEFT)
    {
        _effect_x -= 200;
    }
    
    //정해진 위치에 타격 이펙트 생성.
    instance_create(x+_effect_x, y-_effect_y, obj_fireball_hit);
    
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///타격 박스 obj 생성.

//Collision_area_create(x + (90 * cDir), y-130, z, 90, 80, 30, room_speed * 0.25, id, id);

Collision_area_create(x + (90 * cDir), y-130, z, 90, 80, 30, room_speed * 0.12, id, id);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Z-축 이동 컨트롤
//vertical speed and it's limit
z+=zspeed;
zspeed=min(15,zspeed)
//set gravity on if above ground
if (z&lt;zbottom)
{
    zgravity=1;
    zspeed+=zgravity;
}
else
{
    z=zbottom;
    zgravity=0;
    zspeed=0;
};
//set the bottom of z coordinate
if (!place_meeting(x,y,par_wall))
{
    zbottom=0;
};

//set depth ordering
depth=-y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///충돌체크

/*
    이 충돌 체크 로직은 플레이어 본체, 적 본체
    혹은 그 둘 공통으로 쓰이는 부모 객체가 있으면 그 객체의 step_begin 이벤트에 넣으면 됩니다.
    
    * z 축이 있어야 에러가 나지 않습니다.
*/

var _charID = id;
var _grabbedID = noone;
var _hit = false;
var _grab = false;
var _finger = noone;

var _hitBox   = objHitBox;
var _grabBox  = objGrabBox;

//show_debug_message("----------BEGIN-STEP----: "+string(STATE));

with(obj_collision_area)
{
    if (ownerID != _charID) //충돌 영역의 주인이 내가 아닐경우에만 작동
    {
        //충돌 객체의 값
        var _x1 = x - (collisionArea_w/2);
        var _x2 = x + (collisionArea_w/2);
        var _y1 = y - (collisionArea_h/2);
        var _y2 = y + (collisionArea_h/2);
        var _z1 = y + z - (collisionArea_l);
        var _z2 = y + z;
        
        //캐릭터의 값
        var _col_x1 = _charID.x;
        var _col_x2 = _charID.x;
        var _col_y1 = _charID.y;
        var _col_y2 = _charID.y;
        var _col_z1 = _charID.y + _charID.z - _charID.sprite_height; //스프라이트의 높이
        var _col_z2 = _charID.y + _charID.z; //땅바닥
        
        if (Collision_check_rect(_x1, _x2, _y1, _y2, _col_x1, _col_x2, _col_y1, _col_y2)) //x축 y축 체크
        {
            if Collision_check_rect(0, 0, _z1, _z2, 0, 0, _col_z1, _col_z2) //z축 체크
            {
                _hit = true;
                instance_destroy(); //맞았으니 할일을 다한 충돌 영역 객체는 삭제
            }
        }
    }
}


//맞으면 일어날 일을 여기다가 입력
if(_hit)
{
    
}

with(obj_grab_area){
    // 1.RUN or RUN_STOP 상태가 아니고,
    // 2.충돌 영역의 주인이 내가 아닐경우에만 작동
    /*
    if (       (_charID.STATE != GRAB &amp;&amp; _charID.STATE != GRAB_ING)
            &amp;&amp; (_charID.STATE != GRAB_ATTACK00 &amp;&amp; _charID.STATE != GRAB_ATTACK01 &amp;&amp; _charID.STATE != GRAB_ATTACK02 )
            &amp;&amp; (_charID.STATE != RUN  &amp;&amp; _charID.STATE != RUN_STOP) 
            &amp;&amp; ownerID != _charID  ) 
    */        
    if ( _charID.STATE == WALK &amp;&amp; ownerID != _charID ) 
    {
        //충돌 객체의 값
        var _x1 = x - (grabArea_w/2);
        var _x2 = x + (grabArea_w/2);
        var _y1 = y - (grabArea_h/2);
        var _y2 = y + (grabArea_h/2);
        var _z1 = y + z - (grabArea_l);
        var _z2 = y + z;
        
        //캐릭터의 값
        var _col_x1 = _grabBox.x - (grabArea_w/2);  //_charID.x;
        var _col_x2 = _grabBox.x + (grabArea_w/2);  //_charID.x;
        var _col_y1 = _grabBox.y - (grabArea_h/2);  //_charID.y;
        var _col_y2 = _grabBox.y + (grabArea_h/2);  //_charID.y;
        var _col_z1 = _grabBox.y + _grabBox.z - _charID.sprite_height;  // //_charID.y + _charID.z - _charID.sprite_height; //스프라이트의 높이
        var _col_z2 = _grabBox.y + _grabBox.z; //_charID.y + _charID.z; //땅바닥
        
        if (Collision_check_rect(_x1, _x2, _y1, _y2, _col_x1, _col_x2, _col_y1, _col_y2)) //x축 y축 체크
        {
            if Collision_check_rect(0, 0, _z1, _z2, 0, 0, _col_z1, _col_z2) //z축 체크
            {
                _grab = true;
                
                //잡은 instanceID의 상태를 GRAB으로 변경.
                _charID.STATE = GRAB;
                       
                //잡힌 instanceID에게 잡은 instanceID를 알려줌.
                ownerID.grabberID = _charID;
                //잡힌 instanceID의 상태를 GRAB으로 변경.
                ownerID.STATE = GRAB;
                
                _grabbedID = ownerID;
                
            }
        }
    }
}


var _sunbeeSTATE = STATE;


//show_debug_message("---obj_Sunbee_Begin_Step_1 : "+ string(_charID.STATE) +" | _grab : "+string(_grab) );



//몬스터를 잡으면 일어날 일을 여기다가 입력.
if(_charID.STATE == GRAB  &amp;&amp; _grab)
{
    //움켜잡는 손가락 노출.
    //show_debug_message(object_get_name(object_index) + '는 잡았다!! : '+string(current_time));
    
    if(cDir == RIGHT)
    {
        _finger = instance_create(_charID.x + (90 *_charID.cDir),  _charID.y-143,  obj_Sunbee_grip_finger);
    }
    else if(cDir == LEFT)
    {
        _finger = instance_create( (_charID.x - 10 ) *_charID.cDir,  _charID.y-143,  obj_Sunbee_grip_finger);
    }
    
    _finger.depth = _grabbedID.depth - 2;    
    
    /*
    finger.depth = _grabbedID.depth - 2;    
    
    
    show_debug_message("finger.depth (1) = "+string(finger.depth));      
    show_debug_message("_grabbedID.depth = "+string(_grabbedID.depth));      
    show_debug_message("_charID.depth = "+string(_charID.depth));   
    finger.depth = _grabbedID.depth - 2;
    show_debug_message("finger.depth (2) = "+string(finger.depth));   
    */     
    
      
    
}
else if(_sunbeeSTATE == GRAB_ATTACK02)
{
    with(obj_Sunbee_grip_finger){
        
        //show_debug_message("000000000000 - 선비 상태 : "+string(_sunbeeSTATE));
        instance_destroy();
        
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///이동, 공격 스크립트

//var _moveSpeed = 8; //기본 이동속도
//var hspd = 0; 
//var vspd = 0;

var _right = keyboard_check(vk_right);
var _left = keyboard_check(vk_left);
var _up = keyboard_check(vk_up);
var _down = keyboard_check(vk_down);


//show_debug_message("----------STEP-[1]---: "+string(STATE));


//--------------ATTACK--------------START--
//공격 시동 &amp; 콤보 연결.
//공격은 일단 'Z' 키로 설정함.
if(keyboard_check_pressed(ord('Z'))){
    switch(STATE)
    {
        case IDLE:
        case WALK:
        
            //일단 이미지 재생 정지.
            image_index = 0;    
        
            //공격 스프라이트로 변경.
            sprite_index = spr_sunbee_n_atck_1;
            image_speed = .50;
            
            STATE = ATTACK00;  
            
            //Attack Area 생성.
            //Collision_area_create(x + (90 * cDir), y-130, z, 90, 80, 30, room_speed * 0.25, id, id);
            
            //공격 시에는 이동 금지.
            hspd = 0;
            vspd = 0;
            
            //타격 이펙트 obj 생성.
            alarm[0] = 5;
        
        break;
        
        case ATTACK00: // The punching state
        
            if(image_index &gt;= 1) // If players image index is low enough to trigger combo attack
            {
                image_index = 0;
                sprite_index = spr_sunbee_n_atck_2; // Change the players animation to Combo Punch
                
                if(isMonsterHit != true)
                {
                    //image_speed = .99; //ORIGINAL
                    image_speed = .50;
                }else{
                    //image_speed = .27; // Set the players animation speed
                    image_speed = .50;
                }
                //Attack Area 생성.
                //Collision_area_create(x + (90 * cDir), y-130, z, 90, 30, 30, room_speed * 0.25, id, id);
                
                //몬스터가 맞지 않았다면 Switch 문 탈출.  
                if(isMonsterHit != true) break;
                
                STATE = ATTACK01; 
                
                //타격 이펙트 obj 생성.
                alarm[0] = 2;
            }
        break;
        
        case ATTACK01: // The punching state
        
            //몬스터가 맞지 않았다면 Switch 문 탈출.
            if(isMonsterHit != true) break;
            
            if(image_index &gt;= 2) // If players image index is low enough to trigger combo attack
            {
                image_index = 0;
                sprite_index = spr_sunbee_n_atck_3; // Change the players animation to Combo Punch
                image_speed = .6; // Set the players animation speed

                STATE = ATTACK02;
                
                //Attack Area 생성.
                //Collision_area_create(x + (90 * cDir), y-130, z, 90, 30, 30, room_speed * 0.25, id, id);
                //타격 이펙트 obj 생성.
                alarm[0] = 2;
            }
        break;
        
        case ATTACK02: // The punching state
            //몬스터가 맞지 않았다면 Switch 문 탈출.
            if(isMonsterHit != true) break;
        
            if(image_index &gt;= 4) // If players image index is low enough to trigger combo attack
            {
                image_index = 0;
                sprite_index = spr_sunbee_n_atck_4; // Change the players animation to Combo Punch
                image_speed = .4; // Set the players animation speed
                
                STATE = ATTACK03;
                
                //Attack Area 생성.
                //Collision_area_create(x + (90 * cDir), y-130, z, 90, 30, 30, room_speed * 0.45, id, id);
                //타격 이펙트 obj 생성.
                alarm[0] = 2;
                
                with(obj_Sunbee_grip_finger)
                {
                    instance_destroy();
                } 
                x += 20 * cDir; // x축 이동.
            }
            
            
            
        break;
        
        
        case JUMP: // The Vertical Jump state
            if( 3 &lt;= image_index  &amp;&amp; image_index &lt;= 6 ) // If players image index is low enough to trigger combo attack
            {
                image_index = 0;
                sprite_index = spr_sunbee_n_jump_kick;
                image_speed = .3; // Set the players animation speed
                
                STATE = JUMP_ATTACK;
            }
        break;
        
        case GRABED :
            
            sprite_index = spr_sunbee_n_grip_atck_1;
            image_speed = .5; // Set the players animation speed
            STATE = GRAB_ATTACK00;
            monsterGrabHitCnt = 1;
            
            show_debug_message("-----[ 1st | GRABED | 1타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
            
        break;
        
        case GRAB_ING :
            
            /*
            if(monsterGrabHitCnt == 0)
            {
                STATE = GRAB_ATTACK00;
                show_debug_message("-----GRAB_ATTACK00-000--?? -- ");    
            }
            else 
            */
            
            if(monsterGrabHitCnt == 1)
            {
                //STATE = GRAB_ATTACK01;
                if(image_index &gt;= image_number - 1) // When animation is finished
                {
                    sprite_index = spr_sunbee_n_grip_atck_1;
                    image_speed = .5; // Set the players animation speed
                 
                    STATE = GRAB_ATTACK01;
                    monsterGrabHitCnt = 2;
                    
                    show_debug_message("-----[ 2nd | GRAB_ING | 2타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
                }    
            }
            else if(monsterGrabHitCnt == 2)
            {
                if(image_index &gt;= image_number - 1) // When animation is finished
                {
                    sprite_index = spr_sunbee_n_grip_atck_2;
                    image_speed = .3; // Set the players animation speed
                    
                    STATE = GRAB_ATTACK02;
                    monsterGrabHitCnt = 0;
                    show_debug_message("-----[ 3rd | GRAB_ING | 3타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
                }    
            }    
        
        break;
        
        
        case GRAB_ATTACK00 :
            if(image_index &gt;= image_number - 1) // When animation is finished
            {    
                sprite_index = spr_sunbee_n_grip_atck_1;
                image_speed = .5; // Set the players animation speed
                
                monsterGrabHitCnt = 1; //잡힌 몬스터 피격 횟수.
                show_debug_message("-----[ 연속입력 !!! | GRAB_ATTACK00 | 1타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
            
                STATE = GRAB_ATTACK01;
            }
            
        break;
        
        case GRAB_ATTACK01 :
            if(image_index &gt;= image_number - 1) // When animation is finished
            {    
                sprite_index = spr_sunbee_n_grip_atck_1;
                image_speed = .5; // Set the players animation speed
                
                monsterGrabHitCnt = 2; //잡힌 몬스터 피격 횟수.
                show_debug_message("-----[ 연속입력 !!! | GRAB_ATTACK01 | 2타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
                
                STATE = GRAB_ATTACK02;
            }
            
        break;
        
        case GRAB_ATTACK02 :
            if(image_index &gt;= image_number - 1) // When animation is finished
            {    
                sprite_index = spr_sunbee_n_grip_atck_2;
                image_speed = .3; // Set the players animation speed
                
                monsterGrabHitCnt = 0; //잡힌 몬스터 피격 횟수 버퍼 초기화
                show_debug_message("-----[ 연속입력 !!! | GRAB_ATTACK02 | 3타 ] monsterGrabHitCnt : -- : "+string(monsterGrabHitCnt));
                
                //SATE = IDLE;
            }
               
        break;
        
        
        //달리기 공격.
        case RUN:
            //image_speed = .4;
            STATE = RUN_ATTACK;    
        
        break;
        
    }
}
//--------------ATTACK--------------END--


//이동
//Sprite index change when player move.

//이미지 플립. : 달리기 STOP, 잡기 중일때에는 이미지 플립이 되지 않는다.
if( (_right || _left) 
        &amp;&amp; STATE != RUN_STOP 
        &amp;&amp; STATE != RUN_ATTACK
        &amp;&amp; STATE != GRAB 
        &amp;&amp; STATE != GRAB_ING )
{
    if(_right) cDir = RIGHT;  
    if(_left) cDir = LEFT;
}

//달리기 STOP 상태에서는 속도만 줄어든다.
if(STATE == RUN_STOP || STATE == RUN_ATTACK)
{
    if(hspd &lt; -moveSpeed) hspd = -moveSpeed;
    if(hspd &gt; moveSpeed)  hspd = moveSpeed;
    
    if(vspd &gt; moveSpeed) vspd = moveSpeed;
    if(vspd &lt; -moveSpeed) vspd = -moveSpeed;
}

//통상의 이동.
if(STATE == IDLE || STATE == WALK || STATE == RUN )
{
    if(_right || _left || _up || _down)
    {
        if(STATE == IDLE || STATE == WALK)
        {
            sprite_index = spr_sunbee_n_walk;
        }
        else if(STATE == RUN)
        {
            sprite_index = spr_sunbee_n_run;
        }
        
        //Horizontal speed
        if(STATE == RUN)
        {
            hspd = runSpeed * cDir;
        }
        else
        {
            hspd += (_right - _left) * acc;
        }
        if(_right || _left)
        {
            if(_right) cDir = RIGHT;
            if(_left) cDir = LEFT;
            
            if(hspd &lt; -moveSpeed) hspd = -moveSpeed;
            if(hspd &gt; moveSpeed)  hspd = moveSpeed;
        }else{
            hspd = 0;
        }
        
        //Vertical speed
        vspd += (_down - _up) * acc;
        if(_up || _down){
            if(vspd &gt; moveSpeed) vspd = moveSpeed;
            if(vspd &lt; -moveSpeed) vspd = -moveSpeed;
        }else{
            vspd = 0;
        }
        
        //상태를 WALK로 변경.
        //단, 뛸때는 제외.
        if( STATE != RUN )
        {
            STATE = WALK;
        }
        
    }
    else 
    {
        //정지 했을 때의 Something.
        apply_friction(acc);
    }
    
}
else if(STATE == RUN_ATTACK)
{
    apply_friction(1.5);
}

// 방향키 더블 탭 하여 달리기------START-------------------------------------------
if(double_tap_timer &gt; 0)
{
    double_tap_timer -= 1;
} 
else 
{
    double_tap_timer = 0;
}

//달릴때의 Do-Something.
//if ( keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_down) )
if ( STATE != RUN_ATTACK &amp;&amp; keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left) )
{
    //달리는 도중 공격키가 입력 되었을때의 Do-Something.
    if(keyboard_check(ord('Z'))) {
    
    }else{
    
        if double_tap_timer &gt; 0
        {
            //show_debug_message("0-0-0-0-0-00-0-0 : 연속입력ed."+string(double_tap_timer));
            //image_speed = 1;  //나중에 대쉬 할때에는 대쉬 스프라이트를 적용할 것이므로 해당 이미지 스피드 속도 제어 라인을 주석처리함.
            
            moveSpeed = runSpeed;
            STATE = RUN;
            
            exit;
        }
        double_tap_timer = 10;  
    }
}


//멈출때의  Do-Something.
//if ( keyboard_check_released(vk_right) || keyboard_check_released(vk_left)  || keyboard_check_released(vk_up) || keyboard_check_released(vk_down) )
if ( STATE != RUN_ATTACK &amp;&amp; keyboard_check_released(vk_right) || keyboard_check_released(vk_left) )
{
    //멈추는 도중 공격키가 입력 되었을때의 Do-Something.
    if(keyboard_check(ord('J')))
    {
    
    }
    else    
    {
        if double_tap_timer &lt;= 0
        {
            //image_speed = .25; //나중에 대쉬 할때에는 대쉬 스프라이트를 적용할 것이므로 해당 이미지 스피드 속도 제어 라인을 주석처리함.
            moveSpeed = orgnSpeed;
        }
    }   
}

// 방향키 더블 탭 하여 달리기------END-------------------------------------------




// 계산 된 속도 적용하기
//show_debug_message(" ----- hspd : "+string(hspd)+" =====  vspd : "+string(vspd) );
//show_debug_message("----STATE : "+string(STATE) );

x += hspd;
y += vspd;

// Y축 이동 제한.
//y = clamp(y, 742, 948);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation finish

//show_debug_message("----------STEP-[2]---: "+string(STATE));

switch(STATE)
{
    case ATTACK00: // Punching
        if(image_index &gt; image_number - 1) // When animation is finished
        {
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
//            isNowAttack = false;
            isMonsterHit = false;
        }
    break;
 
    case ATTACK01: // Combo Punching
        if(image_index &gt; image_number - 1) // When animation is finished
        {
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
//            isNowAttack = false;
            isMonsterHit = false;
        }
    break;
    
    case ATTACK02: // Combo Punching
        if(image_index &gt; image_number - 1) // When animation is finished
        {
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
//            isNowAttack = false;
            isMonsterHit = false;
        }
    break;
    
    case ATTACK03: // Combo Punching
        if(image_index &gt; image_number - 1) // When animation is finished
        {
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
//            isNowAttack = false;
            isMonsterHit = false;
        }
    break;
    
    case JUMP: // Jump
        if(image_index &gt;= 5) // When animation is finished
        {
            //이미지 사이클을 멈춘다. 
            image_speed = 0;
         
            if(5 &lt;= image_index  &amp;&amp; image_index &lt;= 7 ){
                if(image_index == 5){
                    image_speed = 7;
                }else{
                    image_speed = 6;
                }
                image_speed = original_image_speed;
            }
            
            if(z &gt;= zbottom){
                image_index = 8;
                image_speed = original_image_speed; // Set players animation speed
                STATE = IDLE; // Set players state to standing
//                isNowAttack = false;
            }
        }
    break;   
    
    case JUMP_ATTACK:
        // 땅에 착지 하면 바로 대기 모션으로 이행.
        if(z &gt;= zbottom){
            image_index = 8;
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
//            isNowAttack = false;
        }
        
        if(image_index &gt;= 5) // When animation is finished
        {
            //공중에 떠 있다면
            if(z &lt; zbottom){
                //일단 멈추고.
                image_index = 0;
                
                sprite_index = spr_sunbee_n_v_jump;
                image_index = 6;
                image_speed = original_image_speed;
                STATE = JUMP;
            }
        }
    break;
    
    case GRAB: 
        
        sprite_index = spr_sunbee_n_grip; // Change players animation to grip.
        image_speed = .9; // Set players animation speed
        isNowAttack = true;
        
        //잡기 시에는 이동 금지.
        hspd = 0;
        vspd = 0;
        
        if(image_index &gt;= image_number - 1) // When animation is finished
        {
            image_index = image_number - 1;
        }
        
        STATE = GRABED;
        
    break; 
    
    case GRABED:
        sprite_index = spr_sunbee_n_grip_ing; // Change players animation to grip-ing.
    break;
    
    case GRAB_ING:
        sprite_index = spr_sunbee_n_grip_ing; // Change players animation to grip-ing.
    break;
    
    case GRAB_ATTACK00:
        
        if(image_index &gt;= image_number -1)
        {
            STATE = GRAB_ING;
        }
    break;
    
    case GRAB_ATTACK01:
        
        if(image_index &gt;= image_number -1)
        {
            STATE = GRAB_ING;
        }
    break;
    
    case GRAB_ATTACK02:
        
        if(image_index &gt;= image_number -1)
        {
            //monsterGrabHitCnt = 0; //잡힌 몬스터 피격 횟수 초기화.
            //STATE = GRAB_ING;
            STATE = IDLE;
        }
    break;
    
  
    case RUN_STOP: 
        if(image_index &gt;= image_number - 1) // When animation is finished
        {
            image_index = 0;
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
            
        }
    break; 
    
    case RUN_ATTACK_STOP: 
        //-----&gt; 이 쯤에서 타격 오브젝트를 생성하고,
        //       타격 이펙트 삭제는 obj_spr_run_atck_hit 에서 셀프 destroy() 하게끔 해놨음.
        //if(image_index &gt;=5)
        //{
        if(image_index &gt;= image_number - 1) // When animation is finished
        {
            image_index = 0;
            sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
            image_speed = original_image_speed; // Set players animation speed
            STATE = IDLE; // Set players state to standing
            moveSpeed = orgnSpeed;
        }
        //}
    break; 
    
    case IDLE: 
        
        sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
        image_speed = original_image_speed; // Set players animation speed
        STATE = IDLE; // Set players state to standing
        monsterGrabHitCnt = 0; //몬스터 잡기 피격횟수 초기화    
        
        
    break;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///그리기

// draw Player`s shadow
if(!place_meeting(x, y, par_wall)){
    draw_sprite(spr_playershadow, 0, x, y);
}else{
    draw_sprite(spr_playershadow, 0, x, y+zbottom);
}

draw_sprite_ext(sprite_index, image_index, x, y+z, image_xscale * cDir, image_yscale, image_angle, image_blend, image_alpha);


//실제 기준점 그리기
draw_set_colour(c_red);
draw_rectangle(x - 1, y - 1, x + 1, y + 1, false);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///점프
if (zgravity==0)
{
    image_index = 0;
    sprite_index = spr_sunbee_n_v_jump;
    //image_speed = .8;
    STATE = JUMP; // Jump State.
    
    //2번째 프레임 부터 점프 하기 위해 약간의 인터벌을 부여함.
    alarm[1] = 10; // zspeed =- 14;
    
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
