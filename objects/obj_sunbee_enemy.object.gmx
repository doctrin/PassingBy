<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sunbee_n_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_par_monsters</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///시스템 초기화
z = 0;
global.debugMode = true;

// 날 때린 놈이 막타를 날렸는지 알 수 있게 해주는 전역변수.
isLastAttacked = false;

// 날 때린 놈의 instance id.
hitterID = noone;

// 날 잡은 놈의 instance id.
grabberID = noone;

// 피격시 떨리는 정도 전역변수.
eShake = 0;

// 현재 instance id.
charID = id;

//이미지 재생 기본 속도.
image_speed = .25;

// Z-축 이동을 위한 변수선언.
/***************************************************
  Add the third coordinate, in this case I call it z
  coordinate, it will works alongside the x and y
  coordinate, and z will be the height measure.
 ***************************************************/
z           =0;  //current height
zbottom     =0;  //the lowest position/ground area in current x and y position
zheight     =24; //the height of this object
zspeed      =0;  //set the vertical speed
zgravity    =1;  //gravity, the direction is always facing down

// Hit Area 생성.
objHitBox = Hit_area_create(x, y-90, z, 10, 10, 10, room_speed * 0.25, id, id);
objGrabBox = Grab_area_create(x, y-90, z, 30, 30, 10, room_speed * 0.25, id, id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///넉백

if(isLastAttacked){
    //show_debug_message("막타 맞음 -1");
    //point_direction(x, y, hitterID.x, hitterID.y-500);
    
    //이 부분에서 위치 조정으로 넉백 시킴.
    //speed = -5;
    //direction = 200;
    //hspeed = -10;
    //vspeed = -10;
    //friction = 0.5;
    
    hspeed = 7 * charID.hitterID.cDir; // 때리고 있는 obj의 반대방향으로 날아가야 하기 때문.
    zspeed =- 10; //띄우는 높이.
    
    
    alarm[1] = room_speed - 7; // 2번째 바운싱.
    alarm[0] = room_speed;     // Knock Back  사용 번수 초기화
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///2번째 바운싱.
zspeed =- 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knock Back  사용 번수 초기화
//friction = 0-;
speed = 0;
//hspeed = 0;
//vspeed = 0;
isLastAttacked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Z-축 이동 컨트롤
//vertical speed and it's limit
z+=zspeed;
zspeed=min(15,zspeed)
//set gravity on if above ground
if (z&lt;zbottom)
{
    zgravity=1;
    zspeed+=zgravity;
}
else
{
    z=zbottom;
    zgravity=0;
    zspeed=0;
};
//set the bottom of z coordinate
if (!place_meeting(x,y,par_wall))
{
    zbottom=0;
};

//set depth ordering
depth=-y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///충돌체크

/*
    이 충돌 체크 로직은 플레이어 본체, 적 본체
    혹은 그 둘 공통으로 쓰이는 부모 객체가 있으면 그 객체의 step_begin 이벤트에 넣으면 됩니다.
    
    * z 축이 있어야 에러가 나지 않습니다.
*/

var _charID = id;
var _hit = false;
var _grab = false;

var _hitBox   = objHitBox;
var _grabBox  = objGrabBox;

with(obj_collision_area)
{
    //var _colID = id;
    if (ownerID != _charID) //충돌 영역의 주인이 내가 아닐경우에만 작동
    {
        //충돌 객체의 값
        var _x1 = x - (collisionArea_w/2);
        var _x2 = x + (collisionArea_w/2);
        var _y1 = y - (collisionArea_h/2);
        var _y2 = y + (collisionArea_h/2);
        var _z1 = y + z - (collisionArea_l);
        var _z2 = y + z;
        
        //캐릭터의 값
        var _col_x1 = _hitBox.x;  //_charID.x;
        var _col_x2 = _hitBox.x;  //_charID.x;
        var _col_y1 = _hitBox.y;  //_charID.y;
        var _col_y2 = _hitBox.y;  //_charID.y;
        var _col_z1 = _hitBox.y + _hitBox.z - _charID.sprite_height;  // //_charID.y + _charID.z - _charID.sprite_height; //스프라이트의 높이
        var _col_z2 = _hitBox.y + _hitBox.z; //_charID.y + _charID.z; //땅바닥
        
        if (Collision_check_rect(_x1, _x2, _y1, _y2, _col_x1, _col_x2, _col_y1, _col_y2)) //x축 y축 체크
        {
            if Collision_check_rect(0, 0, _z1, _z2, 0, 0, _col_z1, _col_z2) //z축 체크
            {
            
                _hit = true;
                _charID.hitterID = ownerID;  // 날 때린놈을 오브젝트 전역변수에 지정.
                
                ownerID.isMonsterHit = true; // 때린놈에게는 때렸다고 알려줌.
                
                //Player가 KnockBack Attack을 했는지 피격된 오브젝트에 알려줌.
                //아래의 경우는 Player가 spr_sunbee_n_atck_4를 실행했을 경우에 작동하게 함.
                if(ownerID.sprite_index == spr_sunbee_n_atck_4){
                    _charID.isLastAttacked = true;
                }
                
                if( ownerID.sprite_index != spr_sunbee_n_atck_3 &amp;&amp; ownerID.sprite_index != spr_sunbee_n_atck_4){                   
                    instance_destroy(); //맞았으니 할일을 다한 충돌 영역 객체는 삭제
                }    
                
                
            }
        }
    }
}

//alarm[2] 에서 Knock Back 실행시키기 위해 전역변수에 인스턴스 복사.
charID = _charID;

//맞으면 일어날 일을 여기다가 입력
if(_hit)
{
    //show_message(object_get_name(object_index) + '는 맞았다.');

    //shake on, Draw 이벤트에서 OFF 시킴.
    eShake = 5;
 
    //피격 스프라이트로 변환.   
    sprite_index = spr_sunbee_n_hit_small;
    
    
    //마지막 4타를 맞았을 경우 - Knock Back 실행.
    alarm[2] = 1.7;
    
}

with(obj_grab_area){
    if (ownerID != _charID) //충돌 영역의 주인이 내가 아닐경우에만 작동
    {
        //충돌 객체의 값
        var _x1 = x - (grabArea_w/2);
        var _x2 = x + (grabArea_w/2);
        var _y1 = y - (grabArea_h/2);
        var _y2 = y + (grabArea_h/2);
        var _z1 = y + z - (grabArea_l);
        var _z2 = y + z;
        
        //캐릭터의 값
        var _col_x1 = _hitBox.x - (grabArea_w/2);  //_charID.x;
        var _col_x2 = _hitBox.x + (grabArea_w/2);  //_charID.x;
        var _col_y1 = _hitBox.y - (grabArea_h/2);  //_charID.y;
        var _col_y2 = _hitBox.y + (grabArea_h/2);  //_charID.y;
        var _col_z1 = _hitBox.y + _hitBox.z - _charID.sprite_height;  // //_charID.y + _charID.z - _charID.sprite_height; //스프라이트의 높이
        var _col_z2 = _hitBox.y + _hitBox.z; //_charID.y + _charID.z; //땅바닥
        
        if (Collision_check_rect(_x1, _x2, _y1, _y2, _col_x1, _col_x2, _col_y1, _col_y2)) //x축 y축 체크
        {
            if Collision_check_rect(0, 0, _z1, _z2, 0, 0, _col_z1, _col_z2) //z축 체크
            {
            
                _grab = true;
                _charID.grabberID = ownerID;  // 날 잡은놈을 오브젝트 전역변수에 지정.
                
               // ownerID.STATE = GRAB; // 잡은놈에게는 잡혔다고 알려줌.
                
               // show_debug_message("---ownerID.STATE : "+string(ownerID.STATE));
                
                /*
                //Player가 KnockBack Attack을 했는지 피격된 오브젝트에 알려줌.
                //아래의 경우는 Player가 spr_sunbee_n_atck_4를 실행했을 경우에 작동하게 함.
                if(ownerID.sprite_index == spr_sunbee_n_atck_4){
                    _charID.isLastAttacked = true;
                }
                
                if( ownerID.sprite_index != spr_sunbee_n_atck_3 &amp;&amp; ownerID.sprite_index != spr_sunbee_n_atck_4){                   
                    instance_destroy(); //맞았으니 할일을 다한 충돌 영역 객체는 삭제
                }    
                */                
                
            }
        }
    }
}



//잡히면 일어날 일을 여기다가 입력
if(_grab)
{
    show_debug_message(object_get_name(object_index) + '는 잡혔다. : '+string(current_time));

    //shake on, Draw 이벤트에서 OFF 시킴.
    //eShake = 5;
 
    //피격 스프라이트로 변환.   
    //sprite_index = spr_enemy1_sh;
    
    //마지막 4타를 맞았을 경우 - Knock Back 실행.
    //alarm[2] = 1.7;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation finish

original_image_speed = .25;

//show_debug_message("// in STEP STATE CHECK - "+string(STATE));

switch(sprite_index)
{
    case spr_sunbee_n_hit_small: // Punching
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
        image_speed = original_image_speed; // Set players animation speed
       
    }
    break;
    
    
    case spr_enemy1_n_sh: // Punching
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
        image_speed = original_image_speed; // Set players animation speed
       
    }
    break;
 
    case spr_enemy1_n_bh: // Punching
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_sunbee_n_idle; // Change players animation back to standing
        image_speed = original_image_speed; // Set players animation speed
       
    }
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///그리기

/*
if(isShake == true){
    var _shkCount = 30;
    while(_shkCount &gt; 0){
        draw_sprite_ext(sprite_index, image_index, x+random_range(-(_shkCount), _shkCount), y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        //draw_sprite(sprite_index, image_index, x+random(-(_shkCount), _shkCount), y);
        _shkCount *= 0.5;
    }
    isShake = false;
}else{
    draw_self();

    //실제 기준점 그리기
    draw_set_colour(c_red);
    draw_rectangle(x - 1, y - 1, x + 1, y + 1, false);
    draw_set_colour(c_white);
}
*/

var _drawX = x + random(eShake * 2) - eShake;
if(eShake &gt;0) eShake -= 0.5;

draw_sprite_ext(sprite_index, image_index, _drawX, y+z, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

//실제 기준점 그리기
draw_set_colour(c_red);
draw_rectangle(x-1, y-1, x+1, y+1, false);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
